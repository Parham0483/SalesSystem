{"ast":null,"code":"var _jsxFileName = \"/Users/parhamgolmohammadi/Sales/frontend/src/pages/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as THREE from \"three\";\nimport \"../styles/MainPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const particlesRef = useRef([]);\n  const wavesRef = useRef([]);\n  const animationRef = useRef(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Noise function for world map-like distribution\n  const noise = (x, y) => {\n    const n1 = Math.sin(x * 0.008) * Math.cos(y * 0.008);\n    const n2 = Math.sin(x * 0.004) * Math.cos(y * 0.004) * 0.5;\n    const n3 = Math.sin(x * 0.016) * Math.cos(y * 0.016) * 0.25;\n    return (n1 + n2 + n3 + 1.5) / 3;\n  };\n\n  // Generate world map-like dot pattern\n  const generateWorldMapDots = () => {\n    const dots = [];\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const spacing = 12;\n    for (let x = -width / 2; x < width / 2; x += spacing) {\n      for (let y = -height / 2; y < height / 2; y += spacing) {\n        const noiseValue = noise(x, y);\n\n        // Create continent-like clusters\n        if (noiseValue > 0.45) {\n          // Add randomness to positions\n          const offsetX = (Math.random() - 0.5) * spacing * 0.6;\n          const offsetY = (Math.random() - 0.5) * spacing * 0.6;\n          dots.push({\n            x: x + offsetX,\n            y: y + offsetY,\n            z: (Math.random() - 0.5) * 20,\n            size: Math.random() * 1.5 + 0.8,\n            opacity: Math.random() * 0.4 + 0.6,\n            baseOpacity: Math.random() * 0.4 + 0.6,\n            originalSize: Math.random() * 1.5 + 0.8\n          });\n        }\n      }\n    }\n    return dots;\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);\n    camera.position.z = 100;\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      alpha: true,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 1);\n    sceneRef.current = scene;\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n\n    // Generate dots\n    const dots = generateWorldMapDots();\n    const particles = [];\n\n    // Create particle system\n    dots.forEach(dot => {\n      const geometry = new THREE.CircleGeometry(dot.size, 8);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0x4caf50,\n        transparent: true,\n        opacity: dot.opacity\n      });\n      const particle = new THREE.Mesh(geometry, material);\n      particle.position.set(dot.x, dot.y, dot.z);\n      particle.userData = {\n        baseOpacity: dot.baseOpacity,\n        originalSize: dot.originalSize,\n        baseSize: dot.size\n      };\n      scene.add(particle);\n      particles.push(particle);\n    });\n    particlesRef.current = particles;\n\n    // Mouse click handler\n    const handleClick = event => {\n      const rect = canvas.getBoundingClientRect();\n      const mouse = new THREE.Vector2();\n      mouse.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n      // Convert screen coordinates to world coordinates\n      const vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n\n      // Create wave effect\n      const wave = {\n        center: pos.clone(),\n        radius: 0,\n        maxRadius: 300,\n        intensity: 1,\n        startTime: Date.now(),\n        duration: 3500\n      };\n      wavesRef.current.push(wave);\n    };\n    canvas.addEventListener('click', handleClick);\n\n    // Animation loop\n    const animate = () => {\n      const currentTime = Date.now();\n\n      // Update waves\n      wavesRef.current = wavesRef.current.filter(wave => {\n        const elapsed = currentTime - wave.startTime;\n        const progress = elapsed / wave.duration;\n        if (progress >= 1) return false;\n\n        // Easing function for smooth wave expansion\n        const easeOut = 1 - Math.pow(1 - progress, 3);\n        wave.radius = wave.maxRadius * easeOut;\n        wave.intensity = Math.pow(1 - progress, 2);\n        return true;\n      });\n\n      // Apply wave effects to particles\n      particlesRef.current.forEach(particle => {\n        let finalOpacity = particle.userData.baseOpacity;\n        let finalScale = 1;\n        wavesRef.current.forEach(wave => {\n          const distance = particle.position.distanceTo(wave.center);\n          const waveThickness = 40;\n          if (distance >= wave.radius - waveThickness && distance <= wave.radius + waveThickness) {\n            const waveEffect = wave.intensity * (1 - Math.abs(distance - wave.radius) / waveThickness);\n            finalOpacity = Math.min(1, finalOpacity + waveEffect * 0.8);\n            finalScale = 1 + waveEffect * 2;\n          }\n        });\n        particle.material.opacity = finalOpacity;\n        particle.scale.setScalar(finalScale);\n      });\n      renderer.render(scene, camera);\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n\n      // Regenerate dots for new screen size\n      particlesRef.current.forEach(particle => {\n        scene.remove(particle);\n        particle.geometry.dispose();\n        particle.material.dispose();\n      });\n      const newDots = generateWorldMapDots();\n      const newParticles = [];\n      newDots.forEach(dot => {\n        const geometry = new THREE.CircleGeometry(dot.size, 8);\n        const material = new THREE.MeshBasicMaterial({\n          color: 0x4caf50,\n          transparent: true,\n          opacity: dot.opacity\n        });\n        const particle = new THREE.Mesh(geometry, material);\n        particle.position.set(dot.x, dot.y, dot.z);\n        particle.userData = {\n          baseOpacity: dot.baseOpacity,\n          originalSize: dot.originalSize,\n          baseSize: dot.size\n        };\n        scene.add(particle);\n        newParticles.push(particle);\n      });\n      particlesRef.current = newParticles;\n    };\n    window.addEventListener('resize', handleResize);\n    animate();\n    setIsLoaded(true);\n\n    // Cleanup\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      canvas.removeEventListener('click', handleClick);\n      window.removeEventListener('resize', handleResize);\n      particlesRef.current.forEach(particle => {\n        scene.remove(particle);\n        particle.geometry.dispose();\n        particle.material.dispose();\n      });\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"background-canvas\",\n      style: {\n        opacity: isLoaded ? 1 : 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"welcome-title\",\n          children: \"Welcome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button login-button\",\n            onClick: () => navigate(\"/login\"),\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button register-button\",\n            onClick: () => navigate(\"/register\"),\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"yzhAgpGGx7ye19oo6IOZongP//s=\", false, function () {\n  return [useNavigate];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","THREE","jsxDEV","_jsxDEV","MainPage","_s","navigate","canvasRef","sceneRef","rendererRef","cameraRef","particlesRef","wavesRef","animationRef","isLoaded","setIsLoaded","noise","x","y","n1","Math","sin","cos","n2","n3","generateWorldMapDots","dots","width","window","innerWidth","height","innerHeight","spacing","noiseValue","offsetX","random","offsetY","push","z","size","opacity","baseOpacity","originalSize","canvas","current","scene","Scene","camera","PerspectiveCamera","position","renderer","WebGLRenderer","alpha","antialias","setSize","setClearColor","particles","forEach","dot","geometry","CircleGeometry","material","MeshBasicMaterial","color","transparent","particle","Mesh","set","userData","baseSize","add","handleClick","event","rect","getBoundingClientRect","mouse","Vector2","clientX","left","clientY","top","vector","Vector3","unproject","dir","sub","normalize","distance","pos","clone","multiplyScalar","wave","center","radius","maxRadius","intensity","startTime","Date","now","duration","addEventListener","animate","currentTime","filter","elapsed","progress","easeOut","pow","finalOpacity","finalScale","distanceTo","waveThickness","waveEffect","abs","min","scale","setScalar","render","requestAnimationFrame","handleResize","aspect","updateProjectionMatrix","remove","dispose","newDots","newParticles","cancelAnimationFrame","removeEventListener","className","children","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/parhamgolmohammadi/Sales/frontend/src/pages/MainPage.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as THREE from \"three\";\nimport \"../styles/MainPage.css\";\n\nconst MainPage = () => {\n    const navigate = useNavigate();\n    const canvasRef = useRef(null);\n    const sceneRef = useRef(null);\n    const rendererRef = useRef(null);\n    const cameraRef = useRef(null);\n    const particlesRef = useRef([]);\n    const wavesRef = useRef([]);\n    const animationRef = useRef(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    // Noise function for world map-like distribution\n    const noise = (x, y) => {\n        const n1 = Math.sin(x * 0.008) * Math.cos(y * 0.008);\n        const n2 = Math.sin(x * 0.004) * Math.cos(y * 0.004) * 0.5;\n        const n3 = Math.sin(x * 0.016) * Math.cos(y * 0.016) * 0.25;\n        return (n1 + n2 + n3 + 1.5) / 3;\n    };\n\n    // Generate world map-like dot pattern\n    const generateWorldMapDots = () => {\n        const dots = [];\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const spacing = 12;\n\n        for (let x = -width/2; x < width/2; x += spacing) {\n            for (let y = -height/2; y < height/2; y += spacing) {\n                const noiseValue = noise(x, y);\n\n                // Create continent-like clusters\n                if (noiseValue > 0.45) {\n                    // Add randomness to positions\n                    const offsetX = (Math.random() - 0.5) * spacing * 0.6;\n                    const offsetY = (Math.random() - 0.5) * spacing * 0.6;\n\n                    dots.push({\n                        x: x + offsetX,\n                        y: y + offsetY,\n                        z: (Math.random() - 0.5) * 20,\n                        size: Math.random() * 1.5 + 0.8,\n                        opacity: Math.random() * 0.4 + 0.6,\n                        baseOpacity: Math.random() * 0.4 + 0.6,\n                        originalSize: Math.random() * 1.5 + 0.8\n                    });\n                }\n            }\n        }\n\n        return dots;\n    };\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            2000\n        );\n        camera.position.z = 100;\n\n        const renderer = new THREE.WebGLRenderer({\n            canvas,\n            alpha: true,\n            antialias: true\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000000, 1);\n\n        sceneRef.current = scene;\n        rendererRef.current = renderer;\n        cameraRef.current = camera;\n\n        // Generate dots\n        const dots = generateWorldMapDots();\n        const particles = [];\n\n        // Create particle system\n        dots.forEach(dot => {\n            const geometry = new THREE.CircleGeometry(dot.size, 8);\n            const material = new THREE.MeshBasicMaterial({\n                color: 0x4caf50,\n                transparent: true,\n                opacity: dot.opacity\n            });\n\n            const particle = new THREE.Mesh(geometry, material);\n            particle.position.set(dot.x, dot.y, dot.z);\n            particle.userData = {\n                baseOpacity: dot.baseOpacity,\n                originalSize: dot.originalSize,\n                baseSize: dot.size\n            };\n\n            scene.add(particle);\n            particles.push(particle);\n        });\n\n        particlesRef.current = particles;\n\n        // Mouse click handler\n        const handleClick = (event) => {\n            const rect = canvas.getBoundingClientRect();\n            const mouse = new THREE.Vector2();\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n            // Convert screen coordinates to world coordinates\n            const vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\n            vector.unproject(camera);\n            const dir = vector.sub(camera.position).normalize();\n            const distance = -camera.position.z / dir.z;\n            const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n\n            // Create wave effect\n            const wave = {\n                center: pos.clone(),\n                radius: 0,\n                maxRadius: 300,\n                intensity: 1,\n                startTime: Date.now(),\n                duration: 3500\n            };\n\n            wavesRef.current.push(wave);\n        };\n\n        canvas.addEventListener('click', handleClick);\n\n        // Animation loop\n        const animate = () => {\n            const currentTime = Date.now();\n\n            // Update waves\n            wavesRef.current = wavesRef.current.filter(wave => {\n                const elapsed = currentTime - wave.startTime;\n                const progress = elapsed / wave.duration;\n\n                if (progress >= 1) return false;\n\n                // Easing function for smooth wave expansion\n                const easeOut = 1 - Math.pow(1 - progress, 3);\n                wave.radius = wave.maxRadius * easeOut;\n                wave.intensity = Math.pow(1 - progress, 2);\n\n                return true;\n            });\n\n            // Apply wave effects to particles\n            particlesRef.current.forEach(particle => {\n                let finalOpacity = particle.userData.baseOpacity;\n                let finalScale = 1;\n\n                wavesRef.current.forEach(wave => {\n                    const distance = particle.position.distanceTo(wave.center);\n                    const waveThickness = 40;\n\n                    if (distance >= wave.radius - waveThickness &&\n                        distance <= wave.radius + waveThickness) {\n                        const waveEffect = wave.intensity *\n                            (1 - Math.abs(distance - wave.radius) / waveThickness);\n\n                        finalOpacity = Math.min(1, finalOpacity + waveEffect * 0.8);\n                        finalScale = 1 + waveEffect * 2;\n                    }\n                });\n\n                particle.material.opacity = finalOpacity;\n                particle.scale.setScalar(finalScale);\n            });\n\n            renderer.render(scene, camera);\n            animationRef.current = requestAnimationFrame(animate);\n        };\n\n        // Handle resize\n        const handleResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n\n            // Regenerate dots for new screen size\n            particlesRef.current.forEach(particle => {\n                scene.remove(particle);\n                particle.geometry.dispose();\n                particle.material.dispose();\n            });\n\n            const newDots = generateWorldMapDots();\n            const newParticles = [];\n\n            newDots.forEach(dot => {\n                const geometry = new THREE.CircleGeometry(dot.size, 8);\n                const material = new THREE.MeshBasicMaterial({\n                    color: 0x4caf50,\n                    transparent: true,\n                    opacity: dot.opacity\n                });\n\n                const particle = new THREE.Mesh(geometry, material);\n                particle.position.set(dot.x, dot.y, dot.z);\n                particle.userData = {\n                    baseOpacity: dot.baseOpacity,\n                    originalSize: dot.originalSize,\n                    baseSize: dot.size\n                };\n\n                scene.add(particle);\n                newParticles.push(particle);\n            });\n\n            particlesRef.current = newParticles;\n        };\n\n        window.addEventListener('resize', handleResize);\n        animate();\n        setIsLoaded(true);\n\n        // Cleanup\n        return () => {\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n            canvas.removeEventListener('click', handleClick);\n            window.removeEventListener('resize', handleResize);\n\n            particlesRef.current.forEach(particle => {\n                scene.remove(particle);\n                particle.geometry.dispose();\n                particle.material.dispose();\n            });\n\n            renderer.dispose();\n        };\n    }, []);\n\n    return (\n        <div className=\"main-container\">\n            <canvas\n                ref={canvasRef}\n                className=\"background-canvas\"\n                style={{ opacity: isLoaded ? 1 : 0 }}\n            />\n\n            <div className=\"content-overlay\">\n                <div className=\"welcome-section\">\n                    <h1 className=\"welcome-title\">Welcome</h1>\n                    <div className=\"button-group\">\n                        <button\n                            className=\"action-button login-button\"\n                            onClick={() => navigate(\"/login\")}\n                        >\n                            Login\n                        </button>\n                        <button\n                            className=\"action-button register-button\"\n                            onClick={() => navigate(\"/register\")}\n                        >\n                            Register\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MainPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMW,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMY,WAAW,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMa,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMc,YAAY,GAAGd,MAAM,CAAC,EAAE,CAAC;EAC/B,MAAMe,QAAQ,GAAGf,MAAM,CAAC,EAAE,CAAC;EAC3B,MAAMgB,YAAY,GAAGhB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAMiB,KAAK,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IACpB,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACJ,CAAC,GAAG,KAAK,CAAC,GAAGG,IAAI,CAACE,GAAG,CAACJ,CAAC,GAAG,KAAK,CAAC;IACpD,MAAMK,EAAE,GAAGH,IAAI,CAACC,GAAG,CAACJ,CAAC,GAAG,KAAK,CAAC,GAAGG,IAAI,CAACE,GAAG,CAACJ,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG;IAC1D,MAAMM,EAAE,GAAGJ,IAAI,CAACC,GAAG,CAACJ,CAAC,GAAG,KAAK,CAAC,GAAGG,IAAI,CAACE,GAAG,CAACJ,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI;IAC3D,OAAO,CAACC,EAAE,GAAGI,EAAE,GAAGC,EAAE,GAAG,GAAG,IAAI,CAAC;EACnC,CAAC;;EAED;EACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,IAAI,GAAG,EAAE;IACf,MAAMC,KAAK,GAAGC,MAAM,CAACC,UAAU;IAC/B,MAAMC,MAAM,GAAGF,MAAM,CAACG,WAAW;IACjC,MAAMC,OAAO,GAAG,EAAE;IAElB,KAAK,IAAIf,CAAC,GAAG,CAACU,KAAK,GAAC,CAAC,EAAEV,CAAC,GAAGU,KAAK,GAAC,CAAC,EAAEV,CAAC,IAAIe,OAAO,EAAE;MAC9C,KAAK,IAAId,CAAC,GAAG,CAACY,MAAM,GAAC,CAAC,EAAEZ,CAAC,GAAGY,MAAM,GAAC,CAAC,EAAEZ,CAAC,IAAIc,OAAO,EAAE;QAChD,MAAMC,UAAU,GAAGjB,KAAK,CAACC,CAAC,EAAEC,CAAC,CAAC;;QAE9B;QACA,IAAIe,UAAU,GAAG,IAAI,EAAE;UACnB;UACA,MAAMC,OAAO,GAAG,CAACd,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIH,OAAO,GAAG,GAAG;UACrD,MAAMI,OAAO,GAAG,CAAChB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIH,OAAO,GAAG,GAAG;UAErDN,IAAI,CAACW,IAAI,CAAC;YACNpB,CAAC,EAAEA,CAAC,GAAGiB,OAAO;YACdhB,CAAC,EAAEA,CAAC,GAAGkB,OAAO;YACdE,CAAC,EAAE,CAAClB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,EAAE;YAC7BI,IAAI,EAAEnB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;YAC/BK,OAAO,EAAEpB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;YAClCM,WAAW,EAAErB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;YACtCO,YAAY,EAAEtB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG;UACxC,CAAC,CAAC;QACN;MACJ;IACJ;IAEA,OAAOT,IAAI;EACf,CAAC;EAED5B,SAAS,CAAC,MAAM;IACZ,MAAM6C,MAAM,GAAGpC,SAAS,CAACqC,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;;IAEb;IACA,MAAME,KAAK,GAAG,IAAI5C,KAAK,CAAC6C,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAI9C,KAAK,CAAC+C,iBAAiB,CACtC,EAAE,EACFpB,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACG,WAAW,EACtC,GAAG,EACH,IACJ,CAAC;IACDgB,MAAM,CAACE,QAAQ,CAACX,CAAC,GAAG,GAAG;IAEvB,MAAMY,QAAQ,GAAG,IAAIjD,KAAK,CAACkD,aAAa,CAAC;MACrCR,MAAM;MACNS,KAAK,EAAE,IAAI;MACXC,SAAS,EAAE;IACf,CAAC,CAAC;IACFH,QAAQ,CAACI,OAAO,CAAC1B,MAAM,CAACC,UAAU,EAAED,MAAM,CAACG,WAAW,CAAC;IACvDmB,QAAQ,CAACK,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;IAEnC/C,QAAQ,CAACoC,OAAO,GAAGC,KAAK;IACxBpC,WAAW,CAACmC,OAAO,GAAGM,QAAQ;IAC9BxC,SAAS,CAACkC,OAAO,GAAGG,MAAM;;IAE1B;IACA,MAAMrB,IAAI,GAAGD,oBAAoB,CAAC,CAAC;IACnC,MAAM+B,SAAS,GAAG,EAAE;;IAEpB;IACA9B,IAAI,CAAC+B,OAAO,CAACC,GAAG,IAAI;MAChB,MAAMC,QAAQ,GAAG,IAAI1D,KAAK,CAAC2D,cAAc,CAACF,GAAG,CAACnB,IAAI,EAAE,CAAC,CAAC;MACtD,MAAMsB,QAAQ,GAAG,IAAI5D,KAAK,CAAC6D,iBAAiB,CAAC;QACzCC,KAAK,EAAE,QAAQ;QACfC,WAAW,EAAE,IAAI;QACjBxB,OAAO,EAAEkB,GAAG,CAAClB;MACjB,CAAC,CAAC;MAEF,MAAMyB,QAAQ,GAAG,IAAIhE,KAAK,CAACiE,IAAI,CAACP,QAAQ,EAAEE,QAAQ,CAAC;MACnDI,QAAQ,CAAChB,QAAQ,CAACkB,GAAG,CAACT,GAAG,CAACzC,CAAC,EAAEyC,GAAG,CAACxC,CAAC,EAAEwC,GAAG,CAACpB,CAAC,CAAC;MAC1C2B,QAAQ,CAACG,QAAQ,GAAG;QAChB3B,WAAW,EAAEiB,GAAG,CAACjB,WAAW;QAC5BC,YAAY,EAAEgB,GAAG,CAAChB,YAAY;QAC9B2B,QAAQ,EAAEX,GAAG,CAACnB;MAClB,CAAC;MAEDM,KAAK,CAACyB,GAAG,CAACL,QAAQ,CAAC;MACnBT,SAAS,CAACnB,IAAI,CAAC4B,QAAQ,CAAC;IAC5B,CAAC,CAAC;IAEFtD,YAAY,CAACiC,OAAO,GAAGY,SAAS;;IAEhC;IACA,MAAMe,WAAW,GAAIC,KAAK,IAAK;MAC3B,MAAMC,IAAI,GAAG9B,MAAM,CAAC+B,qBAAqB,CAAC,CAAC;MAC3C,MAAMC,KAAK,GAAG,IAAI1E,KAAK,CAAC2E,OAAO,CAAC,CAAC;MACjCD,KAAK,CAAC1D,CAAC,GAAI,CAACuD,KAAK,CAACK,OAAO,GAAGJ,IAAI,CAACK,IAAI,IAAIL,IAAI,CAAC9C,KAAK,GAAI,CAAC,GAAG,CAAC;MAC5DgD,KAAK,CAACzD,CAAC,GAAG,EAAE,CAACsD,KAAK,CAACO,OAAO,GAAGN,IAAI,CAACO,GAAG,IAAIP,IAAI,CAAC3C,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;;MAE7D;MACA,MAAMmD,MAAM,GAAG,IAAIhF,KAAK,CAACiF,OAAO,CAACP,KAAK,CAAC1D,CAAC,EAAE0D,KAAK,CAACzD,CAAC,EAAE,GAAG,CAAC;MACvD+D,MAAM,CAACE,SAAS,CAACpC,MAAM,CAAC;MACxB,MAAMqC,GAAG,GAAGH,MAAM,CAACI,GAAG,CAACtC,MAAM,CAACE,QAAQ,CAAC,CAACqC,SAAS,CAAC,CAAC;MACnD,MAAMC,QAAQ,GAAG,CAACxC,MAAM,CAACE,QAAQ,CAACX,CAAC,GAAG8C,GAAG,CAAC9C,CAAC;MAC3C,MAAMkD,GAAG,GAAGzC,MAAM,CAACE,QAAQ,CAACwC,KAAK,CAAC,CAAC,CAACnB,GAAG,CAACc,GAAG,CAACM,cAAc,CAACH,QAAQ,CAAC,CAAC;;MAErE;MACA,MAAMI,IAAI,GAAG;QACTC,MAAM,EAAEJ,GAAG,CAACC,KAAK,CAAC,CAAC;QACnBI,MAAM,EAAE,CAAC;QACTC,SAAS,EAAE,GAAG;QACdC,SAAS,EAAE,CAAC;QACZC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACrBC,QAAQ,EAAE;MACd,CAAC;MAEDvF,QAAQ,CAACgC,OAAO,CAACP,IAAI,CAACsD,IAAI,CAAC;IAC/B,CAAC;IAEDhD,MAAM,CAACyD,gBAAgB,CAAC,OAAO,EAAE7B,WAAW,CAAC;;IAE7C;IACA,MAAM8B,OAAO,GAAGA,CAAA,KAAM;MAClB,MAAMC,WAAW,GAAGL,IAAI,CAACC,GAAG,CAAC,CAAC;;MAE9B;MACAtF,QAAQ,CAACgC,OAAO,GAAGhC,QAAQ,CAACgC,OAAO,CAAC2D,MAAM,CAACZ,IAAI,IAAI;QAC/C,MAAMa,OAAO,GAAGF,WAAW,GAAGX,IAAI,CAACK,SAAS;QAC5C,MAAMS,QAAQ,GAAGD,OAAO,GAAGb,IAAI,CAACQ,QAAQ;QAExC,IAAIM,QAAQ,IAAI,CAAC,EAAE,OAAO,KAAK;;QAE/B;QACA,MAAMC,OAAO,GAAG,CAAC,GAAGtF,IAAI,CAACuF,GAAG,CAAC,CAAC,GAAGF,QAAQ,EAAE,CAAC,CAAC;QAC7Cd,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACG,SAAS,GAAGY,OAAO;QACtCf,IAAI,CAACI,SAAS,GAAG3E,IAAI,CAACuF,GAAG,CAAC,CAAC,GAAGF,QAAQ,EAAE,CAAC,CAAC;QAE1C,OAAO,IAAI;MACf,CAAC,CAAC;;MAEF;MACA9F,YAAY,CAACiC,OAAO,CAACa,OAAO,CAACQ,QAAQ,IAAI;QACrC,IAAI2C,YAAY,GAAG3C,QAAQ,CAACG,QAAQ,CAAC3B,WAAW;QAChD,IAAIoE,UAAU,GAAG,CAAC;QAElBjG,QAAQ,CAACgC,OAAO,CAACa,OAAO,CAACkC,IAAI,IAAI;UAC7B,MAAMJ,QAAQ,GAAGtB,QAAQ,CAAChB,QAAQ,CAAC6D,UAAU,CAACnB,IAAI,CAACC,MAAM,CAAC;UAC1D,MAAMmB,aAAa,GAAG,EAAE;UAExB,IAAIxB,QAAQ,IAAII,IAAI,CAACE,MAAM,GAAGkB,aAAa,IACvCxB,QAAQ,IAAII,IAAI,CAACE,MAAM,GAAGkB,aAAa,EAAE;YACzC,MAAMC,UAAU,GAAGrB,IAAI,CAACI,SAAS,IAC5B,CAAC,GAAG3E,IAAI,CAAC6F,GAAG,CAAC1B,QAAQ,GAAGI,IAAI,CAACE,MAAM,CAAC,GAAGkB,aAAa,CAAC;YAE1DH,YAAY,GAAGxF,IAAI,CAAC8F,GAAG,CAAC,CAAC,EAAEN,YAAY,GAAGI,UAAU,GAAG,GAAG,CAAC;YAC3DH,UAAU,GAAG,CAAC,GAAGG,UAAU,GAAG,CAAC;UACnC;QACJ,CAAC,CAAC;QAEF/C,QAAQ,CAACJ,QAAQ,CAACrB,OAAO,GAAGoE,YAAY;QACxC3C,QAAQ,CAACkD,KAAK,CAACC,SAAS,CAACP,UAAU,CAAC;MACxC,CAAC,CAAC;MAEF3D,QAAQ,CAACmE,MAAM,CAACxE,KAAK,EAAEE,MAAM,CAAC;MAC9BlC,YAAY,CAAC+B,OAAO,GAAG0E,qBAAqB,CAACjB,OAAO,CAAC;IACzD,CAAC;;IAED;IACA,MAAMkB,YAAY,GAAGA,CAAA,KAAM;MACvBxE,MAAM,CAACyE,MAAM,GAAG5F,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACG,WAAW;MACtDgB,MAAM,CAAC0E,sBAAsB,CAAC,CAAC;MAC/BvE,QAAQ,CAACI,OAAO,CAAC1B,MAAM,CAACC,UAAU,EAAED,MAAM,CAACG,WAAW,CAAC;;MAEvD;MACApB,YAAY,CAACiC,OAAO,CAACa,OAAO,CAACQ,QAAQ,IAAI;QACrCpB,KAAK,CAAC6E,MAAM,CAACzD,QAAQ,CAAC;QACtBA,QAAQ,CAACN,QAAQ,CAACgE,OAAO,CAAC,CAAC;QAC3B1D,QAAQ,CAACJ,QAAQ,CAAC8D,OAAO,CAAC,CAAC;MAC/B,CAAC,CAAC;MAEF,MAAMC,OAAO,GAAGnG,oBAAoB,CAAC,CAAC;MACtC,MAAMoG,YAAY,GAAG,EAAE;MAEvBD,OAAO,CAACnE,OAAO,CAACC,GAAG,IAAI;QACnB,MAAMC,QAAQ,GAAG,IAAI1D,KAAK,CAAC2D,cAAc,CAACF,GAAG,CAACnB,IAAI,EAAE,CAAC,CAAC;QACtD,MAAMsB,QAAQ,GAAG,IAAI5D,KAAK,CAAC6D,iBAAiB,CAAC;UACzCC,KAAK,EAAE,QAAQ;UACfC,WAAW,EAAE,IAAI;UACjBxB,OAAO,EAAEkB,GAAG,CAAClB;QACjB,CAAC,CAAC;QAEF,MAAMyB,QAAQ,GAAG,IAAIhE,KAAK,CAACiE,IAAI,CAACP,QAAQ,EAAEE,QAAQ,CAAC;QACnDI,QAAQ,CAAChB,QAAQ,CAACkB,GAAG,CAACT,GAAG,CAACzC,CAAC,EAAEyC,GAAG,CAACxC,CAAC,EAAEwC,GAAG,CAACpB,CAAC,CAAC;QAC1C2B,QAAQ,CAACG,QAAQ,GAAG;UAChB3B,WAAW,EAAEiB,GAAG,CAACjB,WAAW;UAC5BC,YAAY,EAAEgB,GAAG,CAAChB,YAAY;UAC9B2B,QAAQ,EAAEX,GAAG,CAACnB;QAClB,CAAC;QAEDM,KAAK,CAACyB,GAAG,CAACL,QAAQ,CAAC;QACnB4D,YAAY,CAACxF,IAAI,CAAC4B,QAAQ,CAAC;MAC/B,CAAC,CAAC;MAEFtD,YAAY,CAACiC,OAAO,GAAGiF,YAAY;IACvC,CAAC;IAEDjG,MAAM,CAACwE,gBAAgB,CAAC,QAAQ,EAAEmB,YAAY,CAAC;IAC/ClB,OAAO,CAAC,CAAC;IACTtF,WAAW,CAAC,IAAI,CAAC;;IAEjB;IACA,OAAO,MAAM;MACT,IAAIF,YAAY,CAAC+B,OAAO,EAAE;QACtBkF,oBAAoB,CAACjH,YAAY,CAAC+B,OAAO,CAAC;MAC9C;MACAD,MAAM,CAACoF,mBAAmB,CAAC,OAAO,EAAExD,WAAW,CAAC;MAChD3C,MAAM,CAACmG,mBAAmB,CAAC,QAAQ,EAAER,YAAY,CAAC;MAElD5G,YAAY,CAACiC,OAAO,CAACa,OAAO,CAACQ,QAAQ,IAAI;QACrCpB,KAAK,CAAC6E,MAAM,CAACzD,QAAQ,CAAC;QACtBA,QAAQ,CAACN,QAAQ,CAACgE,OAAO,CAAC,CAAC;QAC3B1D,QAAQ,CAACJ,QAAQ,CAAC8D,OAAO,CAAC,CAAC;MAC/B,CAAC,CAAC;MAEFzE,QAAQ,CAACyE,OAAO,CAAC,CAAC;IACtB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIxH,OAAA;IAAK6H,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3B9H,OAAA;MACI+H,GAAG,EAAE3H,SAAU;MACfyH,SAAS,EAAC,mBAAmB;MAC7BG,KAAK,EAAE;QAAE3F,OAAO,EAAE1B,QAAQ,GAAG,CAAC,GAAG;MAAE;IAAE;MAAAsH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eAEFpI,OAAA;MAAK6H,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC5B9H,OAAA;QAAK6H,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC5B9H,OAAA;UAAI6H,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAO;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1CpI,OAAA;UAAK6H,SAAS,EAAC,cAAc;UAAAC,QAAA,gBACzB9H,OAAA;YACI6H,SAAS,EAAC,4BAA4B;YACtCQ,OAAO,EAAEA,CAAA,KAAMlI,QAAQ,CAAC,QAAQ,CAAE;YAAA2H,QAAA,EACrC;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTpI,OAAA;YACI6H,SAAS,EAAC,+BAA+B;YACzCQ,OAAO,EAAEA,CAAA,KAAMlI,QAAQ,CAAC,WAAW,CAAE;YAAA2H,QAAA,EACxC;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAClI,EAAA,CA9QID,QAAQ;EAAA,QACOJ,WAAW;AAAA;AAAAyI,EAAA,GAD1BrI,QAAQ;AAgRd,eAAeA,QAAQ;AAAC,IAAAqI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}