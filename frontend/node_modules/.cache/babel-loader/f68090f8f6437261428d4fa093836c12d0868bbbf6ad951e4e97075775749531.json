{"ast":null,"code":"var _jsxFileName = \"/Users/parhamgolmohammadi/Sales/frontend/src/pages/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // Three.js setup\n    const renderer = new THREE.WebGLRenderer({\n      canvas\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(0, window.innerWidth / window.innerHeight, 1, 0, 0, 1);\n    camera.position.z = 1;\n\n    // Uniforms\n    const uniforms = {\n      iTime: {\n        value: 0\n      },\n      iResolution: {\n        value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n      },\n      iMouse: {\n        value: new THREE.Vector4(0, 0, 0, 0)\n      },\n      iClickPositions: {\n        value: new Array(16).fill().map(() => new THREE.Vector2(0, 0))\n      },\n      iClickTimes: {\n        value: new Array(16).fill(0)\n      },\n      iClickCount: {\n        value: 0\n      }\n    };\n\n    // Vertex shader\n    const vertexShader = `\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `;\n\n    // Fragment shader (exact match from aliali.js)\n    const fragmentShader = `\n            precision highp float;\n            varying vec2 vUv;\n            uniform float iTime;\n            uniform vec2 iResolution;\n            uniform vec4 iMouse;\n            uniform vec2 iClickPositions[16];\n            uniform float iClickTimes[16];\n            uniform int iClickCount;\n\n            float random(vec2 st) {\n                return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n            }\n\n            float noise(vec2 st) {\n                vec2 i = floor(st);\n                vec2 f = fract(st);\n                vec2 u = f * f * (3.0 - 2.0 * f);\n                return mix(mix(random(i + vec2(0.0, 0.0)), random(i + vec2(1.0, 0.0)), u.x),\n                           mix(random(i + vec2(0.0, 1.0)), random(i + vec2(1.0, 1.0)), u.x), u.y);\n            }\n\n            float getBayer8x8(vec2 pos) {\n                int x = int(mod(pos.x, 8.0));\n                int y = int(mod(pos.y, 8.0));\n                float bayer[64] = float[](\n                    0.0, 48.0, 12.0, 60.0, 3.0, 51.0, 15.0, 63.0,\n                    32.0, 16.0, 44.0, 28.0, 35.0, 19.0, 47.0, 31.0,\n                    8.0, 56.0, 4.0, 52.0, 11.0, 59.0, 7.0, 55.0,\n                    40.0, 24.0, 36.0, 20.0, 43.0, 27.0, 39.0, 23.0,\n                    2.0, 50.0, 14.0, 62.0, 1.0, 49.0, 13.0, 61.0,\n                    34.0, 18.0, 46.0, 30.0, 33.0, 17.0, 45.0, 29.0,\n                    10.0, 58.0, 6.0, 54.0, 9.0, 57.0, 5.0, 53.0,\n                    42.0, 26.0, 38.0, 22.0, 41.0, 25.0, 37.0, 21.0\n                );\n                return bayer[y * 8 + x] / 64.0;\n            }\n\n            float getNormalizedBayer8x8(vec2 pos) {\n                return getBayer8x8(pos);\n            }\n\n            void main() {\n                vec2 uv = vUv;\n                vec2 centerOffset = vec2(iResolution.x / iResolution.y * 0.5, 0.5);\n                float targetHeight = 1080.0;\n                float targetRes = iResolution.y / targetHeight;\n                vec2 scaledCoord = gl_FragCoord.xy / targetRes;\n\n                float noiseScale = 5.0;\n                float baseNoiseValue = noise(uv * noiseScale);\n                baseNoiseValue = baseNoiseValue * 0.5 + 0.5;\n\n                float waveDuration = 3.5;\n                float waveSpeed = 2.0;\n                float waveFrequency = 20.0;\n                float waveFalloff = 5.0;\n                float waveAmplitude = 0.3;\n                float totalWaveEffect = 0.0;\n\n                for (int i = 0; i < 16; i++) {\n                    if (i < iClickCount) {\n                        float clickTime = iClickTimes[i];\n                        vec2 clickPos = iClickPositions[i] / iResolution.xy;\n                        vec2 clickUV = (clickPos - centerOffset) / (iResolution.y / targetHeight);\n                        clickUV /= targetRes;\n                        float timeSinceClick = iTime - clickTime;\n                        if (timeSinceClick >= 0.0 && timeSinceClick < waveDuration) {\n                            float distToClick = length(uv - clickUV);\n                            float wave = sin(distToClick * waveFrequency - timeSinceClick * waveSpeed);\n                            wave = wave * 0.5 + 0.5;\n                            float temporalFalloff = smoothstep(waveDuration, 0.0, timeSinceClick);\n                            float spatialFalloff = exp(-distToClick * waveFalloff);\n                            wave *= spatialFalloff * temporalFalloff;\n                            wave = pow(wave, 2.5);\n                            totalWaveEffect += wave * waveAmplitude;\n                        }\n                    }\n                }\n\n                float contrast = 1.0;\n                float brightness = 0.0;\n                float spread = 0.3;\n                float finalNoise = baseNoiseValue + totalWaveEffect;\n                finalNoise = (finalNoise - 0.5) * contrast + 0.5 + brightness;\n                finalNoise += totalWaveEffect * 0.5;\n                finalNoise = clamp(finalNoise, 0.0, 1.0);\n\n                vec3 baseColor = vec3(finalNoise);\n                float bayerValue = getNormalizedBayer8x8(scaledCoord);\n                float ditherOffset = spread * (bayerValue - 0.5);\n                vec3 ditheredColor = baseColor + ditherOffset;\n                ditheredColor = clamp(ditheredColor, 0.0, 1.0);\n\n                vec3 colorFirst = vec3(0.0);\n                vec3 colorSecond = vec3(0.0, 1.0, 0.0);\n                float distSqBlack = dot(ditheredColor, ditheredColor);\n                float distSqGreen = dot(ditheredColor - 1.0, ditheredColor - 1.0);\n                float ratio = distSqBlack / (distSqBlack + distSqGreen);\n                float blendFactor = 1.0 / (1.0 + exp(-(ratio - 0.5) * 9000.0));\n                vec3 finalColor = mix(colorFirst, colorSecond, blendFactor);\n\n                gl_FragColor = vec4(finalColor, 1.0);\n            }\n        `;\n\n    // Create material and mesh\n    const material = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      uniforms\n    });\n    const geometry = new THREE.PlaneGeometry(2, 2); // Adjusted to cover the screen properly\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Mouse and click handling\n    let clickCount = 0;\n    const handleMouseMove = e => {\n      uniforms.iMouse.value.set(e.clientX, window.innerHeight - e.clientY, 0, 0);\n    };\n    const handleClick = e => {\n      const currentTime = uniforms.iTime.value;\n      let newClickCount = 0;\n      const newPositions = [];\n      const newTimes = [];\n      for (let i = 0; i < clickCount; i++) {\n        if (currentTime - uniforms.iClickTimes.value[i] < 3.5) {\n          newPositions.push(uniforms.iClickPositions.value[i].clone());\n          newTimes.push(uniforms.iClickTimes.value[i]);\n          newClickCount++;\n        }\n      }\n      if (newClickCount < 16) {\n        newPositions.push(new THREE.Vector2(e.clientX, window.innerHeight - e.clientY));\n        newTimes.push(currentTime);\n        newClickCount++;\n      } else {\n        let oldestIndex = 0;\n        let oldestTime = newTimes[0];\n        for (let i = 1; i < newClickCount; i++) {\n          if (newTimes[i] < oldestTime) {\n            oldestTime = newTimes[i];\n            oldestIndex = i;\n          }\n        }\n        newPositions[oldestIndex].set(e.clientX, window.innerHeight - e.clientY);\n        newTimes[oldestIndex] = currentTime;\n      }\n      for (let i = 0; i < 16; i++) {\n        if (i < newClickCount) {\n          uniforms.iClickPositions.value[i].copy(newPositions[i]);\n          uniforms.iClickTimes.value[i] = newTimes[i];\n        } else {\n          uniforms.iClickPositions.value[i].set(0, 0);\n          uniforms.iClickTimes.value[i] = 0;\n        }\n      }\n      clickCount = newClickCount;\n      uniforms.iClickCount.value = clickCount;\n    };\n    const handleResize = () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      uniforms.iResolution.value.set(window.innerWidth, window.innerHeight);\n    };\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('click', handleClick);\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    let startTime = performance.now();\n    function animate(time) {\n      uniforms.iTime.value = (time - startTime) / 1000;\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n    requestAnimationFrame(animate);\n\n    // Cleanup\n    return () => {\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('click', handleClick);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100vh\",\n      overflow: \"hidden\",\n      backgroundColor: \"#000\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"junie-hero-section__animation\",\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        display: \"block\",\n        zIndex: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        zIndex: 1,\n        color: \"white\",\n        textAlign: \"center\",\n        paddingTop: \"30vh\",\n        userSelect: \"none\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          fontSize: \"3rem\"\n        },\n        children: \"Welcome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(\"/login\"),\n        style: {\n          margin: \"15px\",\n          padding: \"12px 24px\",\n          fontSize: \"1.1rem\",\n          cursor: \"pointer\",\n          borderRadius: \"6px\",\n          border: \"none\",\n          backgroundColor: \"#4caf50\",\n          color: \"white\"\n        },\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(\"/register\"),\n        style: {\n          margin: \"15px\",\n          padding: \"12px 24px\",\n          fontSize: \"1.1rem\",\n          cursor: \"pointer\",\n          borderRadius: \"6px\",\n          border: \"none\",\n          backgroundColor: \"#2196f3\",\n          color: \"white\"\n        },\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"SgNw9vQDr9Jlb3AzoaG0yvcA5m0=\", false, function () {\n  return [useNavigate];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useRef","useEffect","useNavigate","THREE","jsxDEV","_jsxDEV","MainPage","_s","navigate","canvasRef","canvas","current","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","scene","Scene","camera","OrthographicCamera","position","z","uniforms","iTime","value","iResolution","Vector2","iMouse","Vector4","iClickPositions","Array","fill","map","iClickTimes","iClickCount","vertexShader","fragmentShader","material","ShaderMaterial","geometry","PlaneGeometry","mesh","Mesh","add","clickCount","handleMouseMove","e","set","clientX","clientY","handleClick","currentTime","newClickCount","newPositions","newTimes","i","push","clone","oldestIndex","oldestTime","copy","handleResize","aspect","updateProjectionMatrix","addEventListener","startTime","performance","now","animate","time","render","requestAnimationFrame","removeEventListener","style","width","height","overflow","backgroundColor","children","ref","className","top","left","display","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","color","textAlign","paddingTop","userSelect","fontSize","onClick","margin","padding","cursor","borderRadius","border","_c","$RefreshReg$"],"sources":["/Users/parhamgolmohammadi/Sales/frontend/src/pages/MainPage.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as THREE from \"three\";\n\nconst MainPage = () => {\n    const navigate = useNavigate();\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        // Three.js setup\n        const renderer = new THREE.WebGLRenderer({ canvas });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(window.devicePixelRatio);\n\n        const scene = new THREE.Scene();\n        const camera = new THREE.OrthographicCamera(0, window.innerWidth / window.innerHeight, 1, 0, 0, 1);\n        camera.position.z = 1;\n\n        // Uniforms\n        const uniforms = {\n            iTime: { value: 0 },\n            iResolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n            iMouse: { value: new THREE.Vector4(0, 0, 0, 0) },\n            iClickPositions: { value: new Array(16).fill().map(() => new THREE.Vector2(0, 0)) },\n            iClickTimes: { value: new Array(16).fill(0) },\n            iClickCount: { value: 0 }\n        };\n\n        // Vertex shader\n        const vertexShader = `\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `;\n\n        // Fragment shader (exact match from aliali.js)\n        const fragmentShader = `\n            precision highp float;\n            varying vec2 vUv;\n            uniform float iTime;\n            uniform vec2 iResolution;\n            uniform vec4 iMouse;\n            uniform vec2 iClickPositions[16];\n            uniform float iClickTimes[16];\n            uniform int iClickCount;\n\n            float random(vec2 st) {\n                return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n            }\n\n            float noise(vec2 st) {\n                vec2 i = floor(st);\n                vec2 f = fract(st);\n                vec2 u = f * f * (3.0 - 2.0 * f);\n                return mix(mix(random(i + vec2(0.0, 0.0)), random(i + vec2(1.0, 0.0)), u.x),\n                           mix(random(i + vec2(0.0, 1.0)), random(i + vec2(1.0, 1.0)), u.x), u.y);\n            }\n\n            float getBayer8x8(vec2 pos) {\n                int x = int(mod(pos.x, 8.0));\n                int y = int(mod(pos.y, 8.0));\n                float bayer[64] = float[](\n                    0.0, 48.0, 12.0, 60.0, 3.0, 51.0, 15.0, 63.0,\n                    32.0, 16.0, 44.0, 28.0, 35.0, 19.0, 47.0, 31.0,\n                    8.0, 56.0, 4.0, 52.0, 11.0, 59.0, 7.0, 55.0,\n                    40.0, 24.0, 36.0, 20.0, 43.0, 27.0, 39.0, 23.0,\n                    2.0, 50.0, 14.0, 62.0, 1.0, 49.0, 13.0, 61.0,\n                    34.0, 18.0, 46.0, 30.0, 33.0, 17.0, 45.0, 29.0,\n                    10.0, 58.0, 6.0, 54.0, 9.0, 57.0, 5.0, 53.0,\n                    42.0, 26.0, 38.0, 22.0, 41.0, 25.0, 37.0, 21.0\n                );\n                return bayer[y * 8 + x] / 64.0;\n            }\n\n            float getNormalizedBayer8x8(vec2 pos) {\n                return getBayer8x8(pos);\n            }\n\n            void main() {\n                vec2 uv = vUv;\n                vec2 centerOffset = vec2(iResolution.x / iResolution.y * 0.5, 0.5);\n                float targetHeight = 1080.0;\n                float targetRes = iResolution.y / targetHeight;\n                vec2 scaledCoord = gl_FragCoord.xy / targetRes;\n\n                float noiseScale = 5.0;\n                float baseNoiseValue = noise(uv * noiseScale);\n                baseNoiseValue = baseNoiseValue * 0.5 + 0.5;\n\n                float waveDuration = 3.5;\n                float waveSpeed = 2.0;\n                float waveFrequency = 20.0;\n                float waveFalloff = 5.0;\n                float waveAmplitude = 0.3;\n                float totalWaveEffect = 0.0;\n\n                for (int i = 0; i < 16; i++) {\n                    if (i < iClickCount) {\n                        float clickTime = iClickTimes[i];\n                        vec2 clickPos = iClickPositions[i] / iResolution.xy;\n                        vec2 clickUV = (clickPos - centerOffset) / (iResolution.y / targetHeight);\n                        clickUV /= targetRes;\n                        float timeSinceClick = iTime - clickTime;\n                        if (timeSinceClick >= 0.0 && timeSinceClick < waveDuration) {\n                            float distToClick = length(uv - clickUV);\n                            float wave = sin(distToClick * waveFrequency - timeSinceClick * waveSpeed);\n                            wave = wave * 0.5 + 0.5;\n                            float temporalFalloff = smoothstep(waveDuration, 0.0, timeSinceClick);\n                            float spatialFalloff = exp(-distToClick * waveFalloff);\n                            wave *= spatialFalloff * temporalFalloff;\n                            wave = pow(wave, 2.5);\n                            totalWaveEffect += wave * waveAmplitude;\n                        }\n                    }\n                }\n\n                float contrast = 1.0;\n                float brightness = 0.0;\n                float spread = 0.3;\n                float finalNoise = baseNoiseValue + totalWaveEffect;\n                finalNoise = (finalNoise - 0.5) * contrast + 0.5 + brightness;\n                finalNoise += totalWaveEffect * 0.5;\n                finalNoise = clamp(finalNoise, 0.0, 1.0);\n\n                vec3 baseColor = vec3(finalNoise);\n                float bayerValue = getNormalizedBayer8x8(scaledCoord);\n                float ditherOffset = spread * (bayerValue - 0.5);\n                vec3 ditheredColor = baseColor + ditherOffset;\n                ditheredColor = clamp(ditheredColor, 0.0, 1.0);\n\n                vec3 colorFirst = vec3(0.0);\n                vec3 colorSecond = vec3(0.0, 1.0, 0.0);\n                float distSqBlack = dot(ditheredColor, ditheredColor);\n                float distSqGreen = dot(ditheredColor - 1.0, ditheredColor - 1.0);\n                float ratio = distSqBlack / (distSqBlack + distSqGreen);\n                float blendFactor = 1.0 / (1.0 + exp(-(ratio - 0.5) * 9000.0));\n                vec3 finalColor = mix(colorFirst, colorSecond, blendFactor);\n\n                gl_FragColor = vec4(finalColor, 1.0);\n            }\n        `;\n\n        // Create material and mesh\n        const material = new THREE.ShaderMaterial({\n            vertexShader,\n            fragmentShader,\n            uniforms\n        });\n        const geometry = new THREE.PlaneGeometry(2, 2); // Adjusted to cover the screen properly\n        const mesh = new THREE.Mesh(geometry, material);\n        scene.add(mesh);\n\n        // Mouse and click handling\n        let clickCount = 0;\n\n        const handleMouseMove = (e) => {\n            uniforms.iMouse.value.set(e.clientX, window.innerHeight - e.clientY, 0, 0);\n        };\n\n        const handleClick = (e) => {\n            const currentTime = uniforms.iTime.value;\n            let newClickCount = 0;\n            const newPositions = [];\n            const newTimes = [];\n\n            for (let i = 0; i < clickCount; i++) {\n                if (currentTime - uniforms.iClickTimes.value[i] < 3.5) {\n                    newPositions.push(uniforms.iClickPositions.value[i].clone());\n                    newTimes.push(uniforms.iClickTimes.value[i]);\n                    newClickCount++;\n                }\n            }\n\n            if (newClickCount < 16) {\n                newPositions.push(new THREE.Vector2(e.clientX, window.innerHeight - e.clientY));\n                newTimes.push(currentTime);\n                newClickCount++;\n            } else {\n                let oldestIndex = 0;\n                let oldestTime = newTimes[0];\n                for (let i = 1; i < newClickCount; i++) {\n                    if (newTimes[i] < oldestTime) {\n                        oldestTime = newTimes[i];\n                        oldestIndex = i;\n                    }\n                }\n                newPositions[oldestIndex].set(e.clientX, window.innerHeight - e.clientY);\n                newTimes[oldestIndex] = currentTime;\n            }\n\n            for (let i = 0; i < 16; i++) {\n                if (i < newClickCount) {\n                    uniforms.iClickPositions.value[i].copy(newPositions[i]);\n                    uniforms.iClickTimes.value[i] = newTimes[i];\n                } else {\n                    uniforms.iClickPositions.value[i].set(0, 0);\n                    uniforms.iClickTimes.value[i] = 0;\n                }\n            }\n            clickCount = newClickCount;\n            uniforms.iClickCount.value = clickCount;\n        };\n\n        const handleResize = () => {\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            uniforms.iResolution.value.set(window.innerWidth, window.innerHeight);\n        };\n\n        canvas.addEventListener('mousemove', handleMouseMove);\n        canvas.addEventListener('click', handleClick);\n        window.addEventListener('resize', handleResize);\n\n        // Animation loop\n        let startTime = performance.now();\n        function animate(time) {\n            uniforms.iTime.value = (time - startTime) / 1000;\n            renderer.render(scene, camera);\n            requestAnimationFrame(animate);\n        }\n        requestAnimationFrame(animate);\n\n        // Cleanup\n        return () => {\n            canvas.removeEventListener('mousemove', handleMouseMove);\n            canvas.removeEventListener('click', handleClick);\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    return (\n        <div\n            style={{ position: \"relative\", width: \"100%\", height: \"100vh\", overflow: \"hidden\", backgroundColor: \"#000\" }}\n        >\n            <canvas\n                ref={canvasRef}\n                className=\"junie-hero-section__animation\"\n                style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\", height: \"100%\", display: \"block\", zIndex: 0 }}\n            />\n            <div\n                style={{ position: \"relative\", zIndex: 1, color: \"white\", textAlign: \"center\", paddingTop: \"30vh\", userSelect: \"none\" }}\n            >\n                <h2 style={{ fontSize: \"3rem\" }}>Welcome</h2>\n                <button\n                    onClick={() => navigate(\"/login\")}\n                    style={{ margin: \"15px\", padding: \"12px 24px\", fontSize: \"1.1rem\", cursor: \"pointer\", borderRadius: \"6px\", border: \"none\", backgroundColor: \"#4caf50\", color: \"white\" }}\n                >\n                    Login\n                </button>\n                <button\n                    onClick={() => navigate(\"/register\")}\n                    style={{ margin: \"15px\", padding: \"12px 24px\", fontSize: \"1.1rem\", cursor: \"pointer\", borderRadius: \"6px\", border: \"none\", backgroundColor: \"#2196f3\", color: \"white\" }}\n                >\n                    Register\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default MainPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACZ,MAAMS,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;;IAEb;IACA,MAAME,QAAQ,GAAG,IAAIT,KAAK,CAACU,aAAa,CAAC;MAAEH;IAAO,CAAC,CAAC;IACpDE,QAAQ,CAACE,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDL,QAAQ,CAACM,aAAa,CAACH,MAAM,CAACI,gBAAgB,CAAC;IAE/C,MAAMC,KAAK,GAAG,IAAIjB,KAAK,CAACkB,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAInB,KAAK,CAACoB,kBAAkB,CAAC,CAAC,EAAER,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClGK,MAAM,CAACE,QAAQ,CAACC,CAAC,GAAG,CAAC;;IAErB;IACA,MAAMC,QAAQ,GAAG;MACbC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAE,CAAC;MACnBC,WAAW,EAAE;QAAED,KAAK,EAAE,IAAIzB,KAAK,CAAC2B,OAAO,CAACf,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW;MAAE,CAAC;MAChFc,MAAM,EAAE;QAAEH,KAAK,EAAE,IAAIzB,KAAK,CAAC6B,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;MAAE,CAAC;MAChDC,eAAe,EAAE;QAAEL,KAAK,EAAE,IAAIM,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,MAAM,IAAIjC,KAAK,CAAC2B,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;MAAE,CAAC;MACnFO,WAAW,EAAE;QAAET,KAAK,EAAE,IAAIM,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;MAAE,CAAC;MAC7CG,WAAW,EAAE;QAAEV,KAAK,EAAE;MAAE;IAC5B,CAAC;;IAED;IACA,MAAMW,YAAY,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;;IAED;IACA,MAAMC,cAActC,KAAK,CAACuC,cAAc,CAAC;MACtCH,YAAY;MACZC,cAAc;MACdd;IACJ,CAAC,CAAC;IACF,MAAMiB,QAAQ,GAAG,IAAIxC,KAAK,CAACyC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAChD,MAAMC,IAAI,GAAG,IAAI1C,KAAK,CAAC2C,IAAI,CAACH,QAAQ,EAAEF,QAAQ,CAAC;IAC/CrB,KAAK,CAAC2B,GAAG,CAACF,IAAI,CAAC;;IAEf;IACA,IAAIG,UAAU,GAAG,CAAC;IAElB,MAAMC,eAAe,GAAIC,CAAC,IAAK;MAC3BxB,QAAQ,CAACK,MAAM,CAACH,KAAK,CAACuB,GAAG,CAACD,CAAC,CAACE,OAAO,EAAErC,MAAM,CAACE,WAAW,GAAGiC,CAAC,CAACG,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9E,CAAC;IAED,MAAMC,WAAW,GAAIJ,CAAC,IAAK;MACvB,MAAMK,WAAW,GAAG7B,QAAQ,CAACC,KAAK,CAACC,KAAK;MACxC,IAAI4B,aAAa,GAAG,CAAC;MACrB,MAAMC,YAAY,GAAG,EAAE;MACvB,MAAMC,QAAQ,GAAG,EAAE;MAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,UAAU,EAAEW,CAAC,EAAE,EAAE;QACjC,IAAIJ,WAAW,GAAG7B,QAAQ,CAACW,WAAW,CAACT,KAAK,CAAC+B,CAAC,CAAC,GAAG,GAAG,EAAE;UACnDF,YAAY,CAACG,IAAI,CAAClC,QAAQ,CAACO,eAAe,CAACL,KAAK,CAAC+B,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC;UAC5DH,QAAQ,CAACE,IAAI,CAAClC,QAAQ,CAACW,WAAW,CAACT,KAAK,CAAC+B,CAAC,CAAC,CAAC;UAC5CH,aAAa,EAAE;QACnB;MACJ;MAEA,IAAIA,aAAa,GAAG,EAAE,EAAE;QACpBC,YAAY,CAACG,IAAI,CAAC,IAAIzD,KAAK,CAAC2B,OAAO,CAACoB,CAAC,CAACE,OAAO,EAAErC,MAAM,CAACE,WAAW,GAAGiC,CAAC,CAACG,OAAO,CAAC,CAAC;QAC/EK,QAAQ,CAACE,IAAI,CAACL,WAAW,CAAC;QAC1BC,aAAa,EAAE;MACnB,CAAC,MAAM;QACH,IAAIM,WAAW,GAAG,CAAC;QACnB,IAAIC,UAAU,GAAGL,QAAQ,CAAC,CAAC,CAAC;QAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,aAAa,EAAEG,CAAC,EAAE,EAAE;UACpC,IAAID,QAAQ,CAACC,CAAC,CAAC,GAAGI,UAAU,EAAE;YAC1BA,UAAU,GAAGL,QAAQ,CAACC,CAAC,CAAC;YACxBG,WAAW,GAAGH,CAAC;UACnB;QACJ;QACAF,YAAY,CAACK,WAAW,CAAC,CAACX,GAAG,CAACD,CAAC,CAACE,OAAO,EAAErC,MAAM,CAACE,WAAW,GAAGiC,CAAC,CAACG,OAAO,CAAC;QACxEK,QAAQ,CAACI,WAAW,CAAC,GAAGP,WAAW;MACvC;MAEA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACzB,IAAIA,CAAC,GAAGH,aAAa,EAAE;UACnB9B,QAAQ,CAACO,eAAe,CAACL,KAAK,CAAC+B,CAAC,CAAC,CAACK,IAAI,CAACP,YAAY,CAACE,CAAC,CAAC,CAAC;UACvDjC,QAAQ,CAACW,WAAW,CAACT,KAAK,CAAC+B,CAAC,CAAC,GAAGD,QAAQ,CAACC,CAAC,CAAC;QAC/C,CAAC,MAAM;UACHjC,QAAQ,CAACO,eAAe,CAACL,KAAK,CAAC+B,CAAC,CAAC,CAACR,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;UAC3CzB,QAAQ,CAACW,WAAW,CAACT,KAAK,CAAC+B,CAAC,CAAC,GAAG,CAAC;QACrC;MACJ;MACAX,UAAU,GAAGQ,aAAa;MAC1B9B,QAAQ,CAACY,WAAW,CAACV,KAAK,GAAGoB,UAAU;IAC3C,CAAC;IAED,MAAMiB,YAAY,GAAGA,CAAA,KAAM;MACvBrD,QAAQ,CAACE,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MACvDK,MAAM,CAAC4C,MAAM,GAAGnD,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtDK,MAAM,CAAC6C,sBAAsB,CAAC,CAAC;MAC/BzC,QAAQ,CAACG,WAAW,CAACD,KAAK,CAACuB,GAAG,CAACpC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACzE,CAAC;IAEDP,MAAM,CAAC0D,gBAAgB,CAAC,WAAW,EAAEnB,eAAe,CAAC;IACrDvC,MAAM,CAAC0D,gBAAgB,CAAC,OAAO,EAAEd,WAAW,CAAC;IAC7CvC,MAAM,CAACqD,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;;IAE/C;IACA,IAAII,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;IACjC,SAASC,OAAOA,CAACC,IAAI,EAAE;MACnB/C,QAAQ,CAACC,KAAK,CAACC,KAAK,GAAG,CAAC6C,IAAI,GAAGJ,SAAS,IAAI,IAAI;MAChDzD,QAAQ,CAAC8D,MAAM,CAACtD,KAAK,EAAEE,MAAM,CAAC;MAC9BqD,qBAAqB,CAACH,OAAO,CAAC;IAClC;IACAG,qBAAqB,CAACH,OAAO,CAAC;;IAE9B;IACA,OAAO,MAAM;MACT9D,MAAM,CAACkE,mBAAmB,CAAC,WAAW,EAAE3B,eAAe,CAAC;MACxDvC,MAAM,CAACkE,mBAAmB,CAAC,OAAO,EAAEtB,WAAW,CAAC;MAChDvC,MAAM,CAAC6D,mBAAmB,CAAC,QAAQ,EAAEX,YAAY,CAAC;IACtD,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI5D,OAAA;IACIwE,KAAK,EAAE;MAAErD,QAAQ,EAAE,UAAU;MAAEsD,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,OAAO;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,eAAe,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAE7G7E,OAAA;MACI8E,GAAG,EAAE1E,SAAU;MACf2E,SAAS,EAAC,+BAA+B;MACzCP,KAAK,EAAE;QAAErD,QAAQ,EAAE,UAAU;QAAE6D,GAAG,EAAE,CAAC;QAAEC,IAAI,EAAE,CAAC;QAAER,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE,MAAM;QAAEQ,OAAO,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChH,CAAC,eACFvF,OAAA;MACIwE,KAAK,EAAE;QAAErD,QAAQ,EAAE,UAAU;QAAEgE,MAAM,EAAE,CAAC;QAAEK,KAAK,EAAE,OAAO;QAAEC,SAAS,EAAE,QAAQ;QAAEC,UAAU,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAO,CAAE;MAAAd,QAAA,gBAExH7E,OAAA;QAAIwE,KAAK,EAAE;UAAEoB,QAAQ,EAAE;QAAO,CAAE;QAAAf,QAAA,EAAC;MAAO;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7CvF,OAAA;QACI6F,OAAO,EAAEA,CAAA,KAAM1F,QAAQ,CAAC,QAAQ,CAAE;QAClCqE,KAAK,EAAE;UAAEsB,MAAM,EAAE,MAAM;UAAEC,OAAO,EAAE,WAAW;UAAEH,QAAQ,EAAE,QAAQ;UAAEI,MAAM,EAAE,SAAS;UAAEC,YAAY,EAAE,KAAK;UAAEC,MAAM,EAAE,MAAM;UAAEtB,eAAe,EAAE,SAAS;UAAEY,KAAK,EAAE;QAAQ,CAAE;QAAAX,QAAA,EAC3K;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTvF,OAAA;QACI6F,OAAO,EAAEA,CAAA,KAAM1F,QAAQ,CAAC,WAAW,CAAE;QACrCqE,KAAK,EAAE;UAAEsB,MAAM,EAAE,MAAM;UAAEC,OAAO,EAAE,WAAW;UAAEH,QAAQ,EAAE,QAAQ;UAAEI,MAAM,EAAE,SAAS;UAAEC,YAAY,EAAE,KAAK;UAAEC,MAAM,EAAE,MAAM;UAAEtB,eAAe,EAAE,SAAS;UAAEY,KAAK,EAAE;QAAQ,CAAE;QAAAX,QAAA,EAC3K;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACrF,EAAA,CApQID,QAAQ;EAAA,QACOJ,WAAW;AAAA;AAAAsG,EAAA,GAD1BlG,QAAQ;AAsQd,eAAeA,QAAQ;AAAC,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}