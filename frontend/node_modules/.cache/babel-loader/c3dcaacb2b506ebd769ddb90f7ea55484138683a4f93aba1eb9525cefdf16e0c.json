{"ast":null,"code":"var _jsxFileName = \"/Users/parhamgolmohammadi/Sales/frontend/src/component/GoogleAuth/GoogleLoginButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { GoogleLogin } from '@react-oauth/google';\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport NeoBrutalistButton from \"../NeoBrutalist/NeoBrutalistButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginButton = ({\n  onSuccess,\n  onError\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleGoogleSuccess = async credentialResponse => {\n    setLoading(true);\n    try {\n      console.log('🚀 Google login successful, processing...');\n\n      // The credentialResponse contains an ID token, not an access token\n      // We need to decode it or send it to our backend for verification\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000/api/'}auth/google/`, {\n        id_token: credentialResponse.credential // Send ID token to backend\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: true\n      });\n      console.log('✅ Google auth response:', response.data);\n      if (response.status === 200) {\n        const {\n          user,\n          tokens,\n          created,\n          needs_profile_completion,\n          missing_fields\n        } = response.data;\n        console.log('🔑 Storing Google authentication data:', {\n          user: user,\n          hasTokens: !!tokens,\n          isDealer: user.is_dealer,\n          isStaff: user.is_staff,\n          created: created,\n          needsCompletion: needs_profile_completion\n        });\n\n        // Store user data\n        localStorage.setItem('userData', JSON.stringify({\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          is_staff: user.is_staff,\n          is_dealer: user.is_dealer,\n          company_name: user.company_name,\n          phone: user.phone\n        }));\n\n        // Store tokens\n        localStorage.setItem('access_token', tokens.access);\n        localStorage.setItem('refresh_token', tokens.refresh);\n\n        // Set authorization header\n        axios.defaults.headers.common['Authorization'] = `Bearer ${tokens.access}`;\n\n        // Check if profile completion is needed\n        if (needs_profile_completion) {\n          console.log('🔄 Profile completion needed, redirecting...');\n          navigate(\"/complete-profile\", {\n            state: {\n              user: user,\n              missing_fields: missing_fields,\n              isGoogleUser: true\n            }\n          });\n        } else {\n          // Navigate based on user role\n          if (user.is_staff) {\n            console.log('🔄 Navigating to admin dashboard...');\n            navigate(\"/admin\");\n          } else if (user.is_dealer) {\n            console.log('🔄 Navigating to dealer dashboard...');\n            navigate(\"/dealer\");\n          } else {\n            console.log('🔄 Navigating to customer dashboard...');\n            navigate(\"/dashboard\");\n          }\n        }\n        if (onSuccess) {\n          onSuccess(user);\n        }\n      }\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2;\n      console.error(\"❌ Google login error:\", err);\n      let errorMessage = \"خطا در ورود با Google. لطفاً دوباره تلاش کنید.\";\n      if ((_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$data = _err$response.data) !== null && _err$response$data !== void 0 && _err$response$data.error) {\n        errorMessage = err.response.data.error;\n      } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 400) {\n        errorMessage = \"اطلاعات Google نامعتبر است\";\n      }\n      if (onError) {\n        onError(errorMessage);\n      }\n\n      // Clear any existing tokens on error\n      localStorage.removeItem('userData');\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      delete axios.defaults.headers.common['Authorization'];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleGoogleError = error => {\n    console.error(\"❌ Google login failed:\", error);\n    const errorMessage = \"ورود با Google ناموفق بود. لطفاً دوباره تلاش کنید.\";\n    if (onError) {\n      onError(errorMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-login-container\",\n    children: [/*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: handleGoogleSuccess,\n      onError: handleGoogleError,\n      useOneTap: false,\n      auto_select: false,\n      cancel_on_tap_outside: true,\n      size: \"large\",\n      theme: \"filled_yellow\",\n      text: \"signin_with\",\n      locale: \"fa\",\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"google-loading\",\n      style: {\n        marginTop: '10px',\n        textAlign: 'center',\n        color: '#666'\n      },\n      children: \"\\u062F\\u0631 \\u062D\\u0627\\u0644 \\u0648\\u0631\\u0648\\u062F \\u0628\\u0627 Google...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n_s(GoogleLoginButton, \"DnY8KtHWiqG98vKbBdb88BioG/Y=\", false, function () {\n  return [useNavigate];\n});\n_c = GoogleLoginButton;\nexport default GoogleLoginButton;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginButton\");","map":{"version":3,"names":["React","useState","GoogleLogin","useNavigate","axios","NeoBrutalistButton","jsxDEV","_jsxDEV","GoogleLoginButton","onSuccess","onError","_s","loading","setLoading","navigate","handleGoogleSuccess","credentialResponse","console","log","response","post","process","env","REACT_APP_API_URL","id_token","credential","headers","withCredentials","data","status","user","tokens","created","needs_profile_completion","missing_fields","hasTokens","isDealer","is_dealer","isStaff","is_staff","needsCompletion","localStorage","setItem","JSON","stringify","id","email","name","company_name","phone","access","refresh","defaults","common","state","isGoogleUser","err","_err$response","_err$response$data","_err$response2","error","errorMessage","removeItem","handleGoogleError","className","children","useOneTap","auto_select","cancel_on_tap_outside","size","theme","text","locale","disabled","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","textAlign","color","_c","$RefreshReg$"],"sources":["/Users/parhamgolmohammadi/Sales/frontend/src/component/GoogleAuth/GoogleLoginButton.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { GoogleLogin } from '@react-oauth/google';\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport NeoBrutalistButton from \"../NeoBrutalist/NeoBrutalistButton\";\n\nconst GoogleLoginButton = ({ onSuccess, onError }) => {\n    const [loading, setLoading] = useState(false);\n    const navigate = useNavigate();\n\n    const handleGoogleSuccess = async (credentialResponse) => {\n        setLoading(true);\n\n        try {\n            console.log('🚀 Google login successful, processing...');\n\n            // The credentialResponse contains an ID token, not an access token\n            // We need to decode it or send it to our backend for verification\n            const response = await axios.post(\n                `${process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000/api/'}auth/google/`,\n                {\n                    id_token: credentialResponse.credential // Send ID token to backend\n                },\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    withCredentials: true\n                }\n            );\n\n            console.log('✅ Google auth response:', response.data);\n\n            if (response.status === 200) {\n                const { user, tokens, created, needs_profile_completion, missing_fields } = response.data;\n\n                console.log('🔑 Storing Google authentication data:', {\n                    user: user,\n                    hasTokens: !!tokens,\n                    isDealer: user.is_dealer,\n                    isStaff: user.is_staff,\n                    created: created,\n                    needsCompletion: needs_profile_completion\n                });\n\n                // Store user data\n                localStorage.setItem('userData', JSON.stringify({\n                    id: user.id,\n                    email: user.email,\n                    name: user.name,\n                    is_staff: user.is_staff,\n                    is_dealer: user.is_dealer,\n                    company_name: user.company_name,\n                    phone: user.phone\n                }));\n\n                // Store tokens\n                localStorage.setItem('access_token', tokens.access);\n                localStorage.setItem('refresh_token', tokens.refresh);\n\n                // Set authorization header\n                axios.defaults.headers.common['Authorization'] = `Bearer ${tokens.access}`;\n\n                // Check if profile completion is needed\n                if (needs_profile_completion) {\n                    console.log('🔄 Profile completion needed, redirecting...');\n                    navigate(\"/complete-profile\", {\n                        state: {\n                            user: user,\n                            missing_fields: missing_fields,\n                            isGoogleUser: true\n                        }\n                    });\n                } else {\n                    // Navigate based on user role\n                    if (user.is_staff) {\n                        console.log('🔄 Navigating to admin dashboard...');\n                        navigate(\"/admin\");\n                    } else if (user.is_dealer) {\n                        console.log('🔄 Navigating to dealer dashboard...');\n                        navigate(\"/dealer\");\n                    } else {\n                        console.log('🔄 Navigating to customer dashboard...');\n                        navigate(\"/dashboard\");\n                    }\n                }\n\n                if (onSuccess) {\n                    onSuccess(user);\n                }\n            }\n\n        } catch (err) {\n            console.error(\"❌ Google login error:\", err);\n\n            let errorMessage = \"خطا در ورود با Google. لطفاً دوباره تلاش کنید.\";\n\n            if (err.response?.data?.error) {\n                errorMessage = err.response.data.error;\n            } else if (err.response?.status === 400) {\n                errorMessage = \"اطلاعات Google نامعتبر است\";\n            }\n\n            if (onError) {\n                onError(errorMessage);\n            }\n\n            // Clear any existing tokens on error\n            localStorage.removeItem('userData');\n            localStorage.removeItem('access_token');\n            localStorage.removeItem('refresh_token');\n            delete axios.defaults.headers.common['Authorization'];\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleGoogleError = (error) => {\n        console.error(\"❌ Google login failed:\", error);\n        const errorMessage = \"ورود با Google ناموفق بود. لطفاً دوباره تلاش کنید.\";\n\n        if (onError) {\n            onError(errorMessage);\n        }\n    };\n\n    return (\n        <div className=\"google-login-container\">\n            <GoogleLogin\n                onSuccess={handleGoogleSuccess}\n                onError={handleGoogleError}\n                useOneTap={false}\n                auto_select={false}\n                cancel_on_tap_outside={true}\n                size=\"large\"\n                theme = \"filled_yellow\"\n                text=\"signin_with\"\n                locale=\"fa\"\n                disabled={loading}\n            />\n\n            {loading && (\n                <div className=\"google-loading\" style={{\n                    marginTop: '10px',\n                    textAlign: 'center',\n                    color: '#666'\n                }}>\n                    در حال ورود با Google...\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default GoogleLoginButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}