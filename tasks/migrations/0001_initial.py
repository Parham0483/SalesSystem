# Generated by Django 5.2.4 on 2025-08-09 10:20

import django.db.models.deletion
import django.utils.timezone
import tasks.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='InvoiceTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('language', models.CharField(choices=[('fa', 'Persian'), ('en', 'English')], default='fa', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('company_info', models.JSONField(default=dict, help_text='Store company details')),
                ('font_family', models.CharField(default='Vazir', max_length=50)),
                ('page_size', models.CharField(default='A4', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Invoice Template',
                'verbose_name_plural': 'Invoice Templates',
                'db_table': 'invoice_templates',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('base_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Base price for reference', max_digits=10)),
                ('stock', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, help_text='Primary product image', null=True, upload_to='products/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('origin', models.CharField(blank=True, help_text='Country/place of origin', max_length=100, null=True)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit', max_length=50, null=True)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=10.0, help_text='Tax rate for this product as percentage', max_digits=5, verbose_name='Tax Rate (%)')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=8, null=True)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.TextField(blank=True, max_length=500)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=200)),
            ],
            options={
                'db_table': 'products',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('name', models.CharField(max_length=100, verbose_name='Full Name')),
                ('phone', models.CharField(max_length=15)),
                ('company_name', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_order_date', models.DateTimeField(blank=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('google_id', models.CharField(blank=True, help_text='Google OAuth user ID', max_length=100, null=True, unique=True)),
                ('is_dealer', models.BooleanField(default=False, help_text='Is this user a dealer?')),
                ('dealer_code', models.CharField(blank=True, help_text='Unique dealer code', max_length=20, null=True, unique=True)),
                ('dealer_commission_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Commission percentage', max_digits=5)),
                ('national_id', models.CharField(blank=True, max_length=20, null=True)),
                ('economic_id', models.CharField(blank=True, max_length=20, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('complete_address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('province', models.CharField(blank=True, max_length=100, null=True)),
                ('business_type', models.CharField(choices=[('individual', 'شخص حقیقی'), ('company', 'شخص حقوقی')], default='individual', help_text='نوع مشتری', max_length=20)),
                ('registration_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='شماره ثبت شرکت')),
                ('tax_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='شماره مالیاتی')),
                ('is_verified', models.BooleanField(default=False, verbose_name='تایید شده')),
                ('preferred_invoice_type', models.CharField(choices=[('unofficial', 'بدون مالیات'), ('official', 'رسمی')], default='unofficial', max_length=20, verbose_name='نوع فاکتور ترجیحی')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'customers',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending_pricing', 'Pending Pricing'), ('waiting_customer_approval', 'Waiting Customer Approval'), ('confirmed', 'Confirmed'), ('waiting_payment', 'Waiting Payment Receipt'), ('payment_uploaded', 'Payment Receipt Uploaded'), ('completed', 'Completed'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending_pricing', max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer_comment', models.TextField(blank=True, help_text="Customer's initial request/comments", null=True)),
                ('admin_comment', models.TextField(blank=True, help_text="Admin's pricing notes", null=True)),
                ('dealer_assigned_at', models.DateTimeField(blank=True, help_text='When dealer was assigned', null=True)),
                ('dealer_notes', models.TextField(blank=True, help_text='Notes from assigned dealer', null=True)),
                ('custom_commission_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Custom commission rate for this order', max_digits=5, null=True)),
                ('completion_date', models.DateTimeField(blank=True, help_text='When order was completed', null=True)),
                ('quoted_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total quoted by admin', max_digits=12)),
                ('pricing_date', models.DateTimeField(blank=True, help_text='When admin provided pricing', null=True)),
                ('admin_feedback_date', models.DateTimeField(blank=True, null=True)),
                ('customer_response_date', models.DateTimeField(blank=True, null=True)),
                ('customer_rejection_reason', models.TextField(blank=True, null=True)),
                ('business_invoice_type', models.CharField(choices=[('official', 'فاکتور رسمی'), ('unofficial', 'فاکتور شخصی')], default='unofficial', help_text='Business type of invoice - Official (with tax) or Unofficial (without tax)', max_length=15)),
                ('payment_receipt', models.ImageField(blank=True, help_text='Legacy single payment receipt (deprecated)', null=True, upload_to='payment_receipts/')),
                ('payment_receipt_uploaded_at', models.DateTimeField(blank=True, help_text='When payment receipt was uploaded', null=True)),
                ('has_payment_receipts', models.BooleanField(default=False, help_text='True if order has any payment receipts uploaded')),
                ('payment_verified', models.BooleanField(default=False, help_text='Admin verified the payment receipt')),
                ('payment_verified_at', models.DateTimeField(blank=True, help_text='When payment was verified by admin', null=True)),
                ('payment_notes', models.TextField(blank=True, help_text='Admin notes about payment verification', null=True)),
                ('assigned_dealer', models.ForeignKey(blank=True, help_text='Dealer assigned to this order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_orders', to=settings.AUTH_USER_MODEL)),
                ('completed_by', models.ForeignKey(blank=True, help_text='Admin who completed the order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_orders', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('payment_verified_by', models.ForeignKey(blank=True, help_text='Admin who verified the payment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_payments', to=settings.AUTH_USER_MODEL)),
                ('priced_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='priced_orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=20, unique=True)),
                ('invoice_type', models.CharField(choices=[('pre_invoice', 'Pre-Invoice'), ('final_invoice', 'Final Invoice')], default='pre_invoice', max_length=15)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax rate as percentage', max_digits=5)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('payable_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('is_finalized', models.BooleanField(default=False)),
                ('is_paid', models.BooleanField(default=False)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='invoices/')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tasks.order')),
            ],
            options={
                'db_table': 'invoices',
                'ordering': ['-issued_at'],
            },
        ),
        migrations.CreateModel(
            name='DealerCommission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission_rate', models.DecimalField(decimal_places=2, help_text='Commission percentage at time of completion', max_digits=5)),
                ('commission_amount', models.DecimalField(decimal_places=2, help_text='Calculated commission amount', max_digits=10)),
                ('order_total', models.DecimalField(decimal_places=2, help_text='Order total at time of completion', max_digits=12)),
                ('is_paid', models.BooleanField(default=False)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commissions', to=settings.AUTH_USER_MODEL)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='commission', to='tasks.order')),
            ],
            options={
                'db_table': 'dealer_commissions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('order_created', 'Order Created'), ('pricing_submitted', 'Pricing Submitted'), ('customer_approved', 'Customer Approved'), ('customer_rejected', 'Customer Rejected'), ('order_completed', 'Order Completed'), ('dealer_assigned', 'Dealer Assigned'), ('dealer_removed', 'Dealer Removed'), ('dealer_notes_updated', 'Dealer Notes Updated'), ('payment_receipts_uploaded', 'Payment Receipts Uploaded'), ('payment_verified', 'Payment Verified'), ('payment_rejected', 'Payment Rejected'), ('invoice_type_changed', 'Invoice Type Changed'), ('pre_invoice_generated', 'Pre-Invoice Generated'), ('final_invoice_generated', 'Final Invoice Generated')], max_length=50)),
                ('description', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='tasks.order')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'order_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='OrderPaymentReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_file', models.FileField(help_text='Payment receipt file (image or PDF)', upload_to=tasks.models.OrderPaymentReceipt.receipt_upload_path)),
                ('file_type', models.CharField(choices=[('image', 'Image'), ('pdf', 'PDF')], help_text='Type of uploaded file', max_length=10)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this receipt has been verified by admin')),
                ('verified_at', models.DateTimeField(blank=True, help_text='When this receipt was verified', null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Admin notes about this receipt')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_receipts', to='tasks.order')),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded this receipt', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this receipt', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_receipts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Payment Receipt',
                'verbose_name_plural': 'Payment Receipts',
                'db_table': 'order_payment_receipts',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_quantity', models.IntegerField(default=1, help_text='Quantity requested by customer')),
                ('customer_notes', models.TextField(blank=True, help_text='Special requirements from customer', null=True)),
                ('quoted_unit_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Price quoted by admin', max_digits=15)),
                ('final_quantity', models.IntegerField(default=0, help_text='Final quantity confirmed by admin')),
                ('admin_notes', models.TextField(blank=True, help_text='Admin notes about pricing/availability', null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='tasks.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.product')),
            ],
            options={
                'db_table': 'order_items',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='English name', max_length=100)),
                ('name_fa', models.CharField(blank=True, help_text='Persian name', max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0, help_text='Display order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='tasks.productcategory')),
            ],
            options={
                'verbose_name_plural': 'Product Categories',
                'db_table': 'product_categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Product category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='tasks.productcategory'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/additional/')),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('order', models.IntegerField(default=0)),
                ('is_primary', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_images', to='tasks.product')),
            ],
            options={
                'db_table': 'product_images',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ShipmentAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the shipment announcement', max_length=200)),
                ('description', models.TextField(help_text='Describe the new shipment, packaging, container info, etc.')),
                ('image', models.ImageField(blank=True, help_text='Main photo of packaging/container', null=True, upload_to='shipments/')),
                ('origin_country', models.CharField(blank=True, help_text='Country of origin', max_length=100, null=True)),
                ('shipment_date', models.DateField(blank=True, help_text='Date when shipment was sent', null=True)),
                ('estimated_arrival', models.DateField(blank=True, help_text='Estimated arrival date', null=True)),
                ('product_categories', models.CharField(blank=True, help_text='Categories of products in this shipment', max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this announcement active?')),
                ('is_featured', models.BooleanField(default=False, help_text='Show prominently on new arrivals page')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times viewed')),
                ('created_by', models.ForeignKey(help_text='Admin who created this announcement', on_delete=django.db.models.deletion.CASCADE, related_name='shipment_announcements', to=settings.AUTH_USER_MODEL)),
                ('related_products', models.ManyToManyField(blank=True, help_text='Products in this shipment', to='tasks.product')),
            ],
            options={
                'verbose_name': 'Shipment Announcement',
                'verbose_name_plural': 'Shipment Announcements',
                'db_table': 'shipment_announcements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_type', models.CharField(choices=[('order_submitted', 'Order Submitted'), ('pricing_ready', 'Pricing Ready'), ('order_confirmed', 'Order Confirmed'), ('order_rejected', 'Order Rejected'), ('order_completed', 'Order Completed'), ('dealer_assigned', 'Dealer Assigned'), ('dealer_removed', 'Dealer Removed'), ('new_arrival_customer', 'New Arrival - Customer'), ('new_arrival_dealer', 'New Arrival - Dealer'), ('announcement_updated', 'Announcement Updated')], max_length=20)),
                ('recipient_email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=200)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('is_successful', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('dealer', models.ForeignKey(blank=True, help_text='Dealer who received the notification', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='tasks.order')),
                ('announcement', models.ForeignKey(blank=True, help_text='Related announcement for announcement emails', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='tasks.shipmentannouncement')),
            ],
            options={
                'db_table': 'email_notifications',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='ShipmentAnnouncementImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='shipments/images/')),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('order', models.IntegerField(default=0, help_text='Display order')),
                ('announcement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_images', to='tasks.shipmentannouncement')),
            ],
            options={
                'verbose_name': 'Shipment Announcement Image',
                'verbose_name_plural': 'Shipment Announcement Images',
                'db_table': 'shipment_announcement_images',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SMSNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sms_type', models.CharField(choices=[('order_submitted', 'Order Submitted'), ('pricing_ready', 'Pricing Ready'), ('order_confirmed', 'Order Confirmed'), ('order_rejected', 'Order Rejected'), ('order_completed', 'Order Completed'), ('dealer_assigned', 'Dealer Assigned'), ('new_arrival_customer', 'New Arrival - Customer'), ('new_arrival_dealer', 'New Arrival - Dealer'), ('commission_paid', 'Commission Paid'), ('otp', 'OTP Verification'), ('general', 'General Notification'), ('test', 'Test Message'), ('bulk', 'Bulk Message')], default='general', max_length=30)),
                ('recipient_phone', models.CharField(help_text='Phone number(s) SMS was sent to', max_length=20)),
                ('message', models.TextField(help_text='SMS message content', max_length=500)),
                ('is_successful', models.BooleanField(default=False)),
                ('kavenegar_response', models.TextField(blank=True, help_text='Kavenegar API response', null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='SMS cost (if provided by API)', max_digits=10, null=True)),
                ('message_id', models.CharField(blank=True, help_text='Kavenegar message ID', max_length=100, null=True)),
                ('announcement', models.ForeignKey(blank=True, help_text='Related announcement (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sms_notifications', to='tasks.shipmentannouncement')),
                ('dealer', models.ForeignKey(blank=True, help_text='Dealer who received the SMS (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_sms_notifications', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, help_text='Related order (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sms_notifications', to='tasks.order')),
            ],
            options={
                'verbose_name': 'SMS Notification',
                'verbose_name_plural': 'SMS Notifications',
                'db_table': 'sms_notifications',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_key', models.CharField(max_length=50)),
                ('section_title', models.CharField(max_length=100)),
                ('display_order', models.IntegerField(default=0)),
                ('is_table', models.BooleanField(default=False, help_text='True for items table')),
                ('table_columns', models.JSONField(default=list, help_text='Column definitions for tables')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='tasks.invoicetemplate')),
            ],
            options={
                'db_table': 'invoice_sections',
                'ordering': ['display_order'],
                'unique_together': {('template', 'section_key')},
            },
        ),
        migrations.CreateModel(
            name='InvoiceTemplateField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_key', models.CharField(help_text="e.g., 'customer_name', 'total_amount'", max_length=50)),
                ('field_label', models.CharField(help_text="e.g., 'نام مشتری', 'مبلغ کل'", max_length=100)),
                ('field_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('price', 'Price'), ('date', 'Date'), ('email', 'Email')], default='text', max_length=20)),
                ('is_required', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('section', models.CharField(help_text="e.g., 'company', 'customer', 'items', 'totals'", max_length=50)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='tasks.invoicetemplate')),
            ],
            options={
                'db_table': 'invoice_template_fields',
                'ordering': ['section', 'display_order'],
                'unique_together': {('template', 'field_key')},
            },
        ),
    ]
